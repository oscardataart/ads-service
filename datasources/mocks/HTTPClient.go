// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	datasources "app/datasources"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HTTPClient is an autogenerated mock type for the HTTPClient type
type HTTPClient struct {
	mock.Mock
}

// Request provides a mock function with given fields: ctx, info
func (_m *HTTPClient) Request(ctx context.Context, info *datasources.RequestInfo) (*datasources.ResponseInfo, error) {
	ret := _m.Called(ctx, info)

	var r0 *datasources.ResponseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasources.RequestInfo) (*datasources.ResponseInfo, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasources.RequestInfo) *datasources.ResponseInfo); ok {
		r0 = rf(ctx, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasources.ResponseInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasources.RequestInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHTTPClient creates a new instance of HTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPClient {
	mock := &HTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
